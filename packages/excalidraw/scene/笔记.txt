
此包代码主要负责Excalidraw画布场景的核心逻辑处理，包括元素选择、滚动、缩放和比较等功能。
通过`selection.ts`处理元素的选择逻辑，`scroll.ts`处理画布滚动，`zoom.ts`处理缩放，`comparisons.ts`提供元素属性的比较方法。
这些模块共同协作，确保画布场景的交互和渲染效果。

包主要负责 Excalidraw 画布场景的核心逻辑处理，具体功能如下：

1. **元素选择**：通过 `selection.ts` 处理画布中元素的选择逻辑，支持多选、框选等交互方式。

2. **画布滚动**：`scroll.ts` 负责处理画布的滚动逻辑，包括根据元素位置自动调整画布视图，以及手动滚动时的坐标计算。

3. **画布缩放**：`zoom.ts` 实现画布的缩放功能，支持不同缩放级别的计算和视图调整，确保缩放时画布内容的平滑过渡。

4. **元素比较**：`comparisons.ts` 提供了一系列用于比较元素属性的工具函数，如判断元素是否具有背景、描边、箭头等属性，这些函数在元素渲染和交互时被广泛使用。

这些模块共同协作，确保 Excalidraw 画布场景的交互和渲染效果，为用户提供流畅的绘图体验。

RoughJS 是一个轻量级的 JavaScript 图形库（压缩后约 8-9KB），专门用于在网页上绘制手绘风格、素描效果的图形。
它支持 Canvas 和 SVG 两种渲染方式，适用于多种场景，如数据可视化、创意设计、交互式图表等

文件的作用总结：
comparisons.ts
提供元素属性比较的工具函数，如判断元素是否有背景、描边、箭头、圆角等，常用于渲染和交互逻辑。

export.ts
负责将场景中的元素导出为图片（如 PNG、SVG）等格式，包含导出相关的布局、帧处理和渲染逻辑。

index.ts
该包的入口文件，统一导出 selection、scroll、zoom、comparisons 等模块的核心方法，方便外部调用。

Renderer.ts
渲染器类，负责根据场景和视图参数筛选可渲染元素，并与渲染引擎（如 Canvas）协作进行实际绘制。

Scene.ts
管理整个画布场景的数据结构，包括元素的增删改查、状态管理等，是场景的核心数据层。

scroll.ts
处理画布滚动逻辑，包括自动/手动滚动、滚动中心点计算等，确保用户视图的正确定位。

scrollbars.ts
负责滚动条的显示与计算，确定何时显示滚动条及其位置和尺寸。

selection.ts
实现元素的选择逻辑，包括多选、框选、选区内元素筛选等，支持丰富的交互方式。

selection.test.ts
针对 selection.ts 的单元测试文件，确保选择逻辑的正确性。

Shape.ts
负责生成和管理各种图形（如矩形、箭头、自由绘制等）的形状数据，配合 RoughJS 实现手绘风格。

ShapeCache.ts
对图形形状进行缓存，提升渲染性能，避免重复计算。

types.ts
定义场景相关的 TypeScript 类型，包括元素、渲染配置、滚动信息等。

zoom.ts
实现画布缩放功能，包括缩放值的归一化、缩放状态的计算等，保证缩放时的平滑体验。
